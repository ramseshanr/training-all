---
- name: Set up Kubernetes Cluster with containerd
  hosts: mgr,wrk
  become: true
  tasks:

    
    # Update and install dependencies
    - name: Update apt packages
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
    - name: Add modules to containerd.conf
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'
    
    - name: Load overlay module
      command: modprobe overlay

    - name: Load br_netfilter module
      command: modprobe br_netfilter
    - name: Configure sysctl settings for Kubernetes
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'
    - name: Apply sysctl settings
      command: sysctl --system
    - name: Add containerd apt repository
      command: mkdir -m 0755 -p /etc/apt/keyrings
    - name: Create /etc/apt/keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key and convert to keyrings
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: '0644'

    - name: Convert GPG key to keyrings format
      command: gpg --batch --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.gpg

    - name: Remove temporary Docker GPG file
      file:
        path: /tmp/docker.gpg
        state: absent      

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Install containerd
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes
    - name: systemd cgroup Management
      shell: |
              mkdir -p /etc/containerd
              containerd config default>/etc/containerd/config.toml
              sed -e 's/SystemdCgroup = false/SystemdCgroup = true/g' -i /etc/containerd/config.toml
    # - name: Create /etc/containerd directory
    #   file:
    #     path: /etc/containerd
    #     state: directory
    #     mode: '0755'
    # - name: Generate containerd default config
    #   shell: containerd config default > /etc/containerd/config.toml
    #   #creates: /etc/containerd/config.toml
    # - name: Modify SystemdCgroup setting in containerd config
    #   lineinfile:
    #     path: /etc/containerd/config.toml
    #     regexp: '^SystemdCgroup = false'
    #     line: 'SystemdCgroup = true'

    - name: Ensure containerd is started
      service:
        name: containerd
        state: restarted
        enabled: yes

    - name: Ensure /tmp directory has no previous key file
      file:
        path: /tmp/kubernetes-apt-key.gpg
        state: absent

    # Install Kubernetes packages
    - name: Download Kubernetes APT GPG key
   
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        dest: /tmp/kubernetes-apt-key.gpg
        mode: '0644'

    - name: Convert the GPG key to keyrings format
      command: gpg --batch --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-key.gpg

    - name: Remove temporary Kubernetes APT key file
      file:
        path: /tmp/kubernetes-apt-key.gpg
        state: absent

    - name: Add Kubernetes APT repository entry
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /\n"
        mode: '0644'

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        update_cache: yes
        state: present

    - name: Hold Kubernetes packages at current version
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present


    # Initialize Kubernetes Master Node
    - name: Initialize Kubernetes master
      command: kubeadm init 
      when: inventory_hostname == 'mgr'

    # Set up kubeconfig for the master node
    - name: Create .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
      when: inventory_hostname == 'mgr'

    - name: Copy kube config to user directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      when: inventory_hostname == 'mgr'
    - name: Copy kube config to root directory
      file:
            path: /root/.kube/
            state: directory
            owner: root
            group: root
            mode: '0644'
      when: inventory_hostname == 'mgr'      
    - name: Set kubeconfig for root on master
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: '0644'
      when: inventory_hostname == 'mgr'

    # Get the kubeadm join command and store it for future use
    - name: Get kubeadm join command
      command: kubeadm token create --print-join-command
      register: kubeadm_join_command
      when: inventory_hostname == 'mgr'

    - name: Set kubeadm join command in facts
      set_fact:
        kube_join_command: "{{ kubeadm_join_command.stdout }}"
      when: inventory_hostname == 'mgr'
    # Install calico network plugin on Master Node
    - name: Install network plugin
      command:  kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      when: inventory_hostname == 'mgr'

- name: Join Worker Nodes to Cluster
  hosts: wrk
  become: yes
  tasks:
    - name: Wait for master to complete join command generation
      wait_for:
        host: "{{ hostvars['mgr'].ansible_host }}"
        port: 6443
        state: started
      when: inventory_hostname == 'wrk'

    - name: Check if node is already part of the cluster
      command: systemctl status kubelet
      register: kubelet_status
      ignore_errors: yes
      changed_when: false

    - name: Join Kubernetes cluster if not already joined
      command: "{{ hostvars['mgr']['kube_join_command'] }}"
      when: kubelet_status.rc != 0  # Join only if the node is not part of the cluster
 